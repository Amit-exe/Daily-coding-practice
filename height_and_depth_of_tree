#include<bits/stdc++.h>

using namespace std;

const int N = 1e3+4;
vector<int> graph[N];
bool visited[N];
int depth[N],height[N];

void dfs(int vertex, int par=0){

	// after entering vertex

	
	for(auto child : graph[vertex]){

		//before entering child
		if(child==par) continue;
		depth[child] = depth[vertex]+1;
		dfs(child,vertex);
		height[vertex]=max(height[vertex],height[child]+1);
		//after exiting  child node
	}

	//before exiting vertex
}


int main(){
 	
	int n;
	cin>>n;
	int n1=n;
	while(n1--){
		int v1,v2;
		cin>>v1>>v2;
		graph[v1].push_back(v2);
		graph[v2].push_back(v1);
	}

	dfs(1);


	for(int i=1;i<=n;i++){
		cout<<depth[i]<<" "<<height[i]<<endl;
	}
	return 0;
}
