#include<bits/stdc++.h>
using namespace std;

const int N = 1e3+4;
vector<int> graph[N];

int depth[N];

void dfs(int vertex, int par=0){

	// after entering vertex

	
	
	for(auto child : graph[vertex]){

		//before entering child
		if(child==par) continue;
		depth[child]=depth[vertex]+1;
		dfs(child,vertex);

		//after exiting  child node

		
	}

	//before exiting vertex
}

int main(){
 	
	int n;
	cin>>n;
	int n1=n;
	n1-=1;
	while(n1--){

		int v1,v2;
		cin>>v1>>v2;
		graph[v1].push_back(v2);
		graph[v2].push_back(v1);
	}

	dfs(1);

	int ma=0;
	int mdn=-1;
	for(int i=1; i<n; ++i){
		if(ma<depth[i]){
			ma=depth[i];
			mdn=i;
		}
	}

	for(int i=0;i<=n;++i){
		depth[i]=0;
	}
	dfs(mdn);
	mdn=-1;
	ma=-1;
	for(int i=1; i<n; ++i){
		if(ma<depth[i]){
			ma=depth[i];
			mdn=i;
		}
	}

	cout<<ma;

	return 0;
}
